name: Build
on: [push]
jobs:
  build-mac:
    name: Build (macOS)
    runs-on: macos-latest
    steps:
      - name: codesign
        id: codesign
        uses: apple-actions/import-codesign-certs@v2
        with: 
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
          keychain: ${{ github.run_id }}
          keychain-password: ${{ github.run_id }}
      - name: Install Libs
        run: |
          npm i -g appdmg
          brew install pkgconfig
          brew install libusb
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: QtCache-${{ runner.os }}-5.12.8
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with: 
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          modules: qtserialport qtquickcontrols2 
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build
        run: |
          mkdir build
          cd build
          mkdir -p guitar-configurator.app/Contents/MacOS
          cmake ../
          make -j$(sysctl -n hw.logicalcpu)
      - name: Bundle
        run: |
          cd build
          mkdir -p guitar-configurator.app/Contents/MacOS/binaries
          mkdir -p guitar-configurator.app/Contents/MacOS/Frameworks
          cp -rf binaries guitar-configurator.app/Contents/MacOS
          cp -rf binaries/* guitar-configurator.app/Contents/MacOS/Frameworks
          cp -rf *.json guitar-configurator.app/Contents/MacOS
          cp -rf firmware guitar-configurator.app/Contents/MacOS
          macdeployqt guitar-configurator.app -qmldir=../qml
          codesign --entitlements ../resources/entitlements.xml -s "guitar-configurator" "guitar-configurator.app" --deep
          mkdir artifacts
          cp ../resources/appdmg.json .
          cp ../images/icons/icon.icns .
          cp ../images/icons/dmg-background.png .
          appdmg appdmg.json artifacts/guitar-configurator-macOS.dmg
          codesign --entitlements ../resources/entitlements.xml -s "guitar-configurator" "artifacts/guitar-configurator-macOS.dmg" --deep
      - uses: actions/upload-artifact@v1
        with:
          name: mac
          path: build/artifacts
  build-linux:
    name: Build (Linux)
    runs-on: ubuntu-20.04
    steps:
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: QtCache-${{ runner.os }}-5.12.8
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with: 
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          modules: qtserialport qtquickcontrols2 
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build
        run: |
          sudo apt-get install libprocps-dev libudev-dev libusb-1.0-0-dev libxcb-keysyms1 libxcb-icccm4 libxcb-randr0-dev libxcb-xtest0-dev libxcb-xinerama0-dev libxcb-shape0-dev libxcb-xkb-dev libgtk2.0-dev libxcb-image0-dev libxcb-image0 libxcb-render-util0 libxcb-render-util0-dev qt5-style-plugins
          mkdir build
          cd build
          cmake ../ 
          make -j$(nproc)
      - name: Bundle
        run: |
          cd build
          wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
          chmod a+x linuxdeployqt-continuous-x86_64.AppImage
          mkdir appdir/usr/bin
          cp guitar-configurator appdir/usr/bin
          cp -r firmware appdir/usr/bin
          cp -r binaries appdir/usr/bin
          cp memory-locations.json appdir/usr/bin
          ./linuxdeployqt-continuous-x86_64.AppImage appdir/usr/share/applications/guitar-configurator.desktop -appimage -qmldir=../ -extra-plugins=iconengines,platformthemes/libqgtk3.so
          mkdir artifacts
          mv Guitar_Configurator*.AppImage* artifacts/guitar-configurator-linux.AppImage
      - uses: actions/upload-artifact@v1
        with:
          name: linux
          path: build/artifacts
  build-windows:
    name: Build (Windows)
    runs-on: windows-latest
    steps:
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: QtCacheTools-${{ runner.os }}-5.12.8
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with: 
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          modules: qtserialport qtquickcontrols2 
          tools: tools_ifw,4.5.2,qt.tools.ifw.45
      - name: git configure long path
        run: git config --global core.longpaths true
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
      - name: Build
        run: |
          mkdir release
          cd release
          cmake ..\
          msbuild guitar-configurator.vcxproj /t:Build /p:Configuration=Release
        shell: cmd
      - name: Bundle
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo copy firmware
          mkdir deploy
          robocopy ".\firmware" ".\deploy\firmware" /e /njh /njs /ndl /nc /ns /nfl
          robocopy ".\binaries\win" ".\deploy\binaries" /e /njh /njs /ndl /nc /ns /nfl
          copy release\*.json deploy
          cp release\Release\guitar-configurator.exe deploy
          echo windeployqt
          windeployqt deploy\guitar-configurator.exe -qmldir=.
          echo copy data
          robocopy ".\deploy" ".\installer\packages\net.tangentmc.guitar_configurator\data" /e /njh /njs /ndl /nc /ns /nfl
          mkdir artifacts
          echo inst script
          powershell ".\installer\script.ps1"
          echo binarycreator
          ..\Qt\Tools\QtInstallerFramework\4.5\bin\binarycreator -c installer\config\config.xml -p installer\packages artifacts\guitar-configurator-win.exe -f
          echo repogen
          ..\Qt\Tools\QtInstallerFramework\4.5\bin\repogen -p installer\packages artifacts\repository
        shell: cmd
      - uses: actions/upload-artifact@v1
        with:
          name: windows
          path: artifacts
  release:
    if: contains(github.ref, 'tags/v')
    name: Release Build
    runs-on: ubuntu-latest
    # needs: [build-linux, build-windows]
    needs: [build-linux, build-mac, build-windows]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Download Windows Artifacts
        uses: actions/download-artifact@v1
        with:
          name: windows
      - name: Download macOS Artifacts
        uses: actions/download-artifact@v1
        with:
          name: mac  
      - name: Download Linux Artifacts
        uses: actions/download-artifact@v1
        with:
          name: linux  
      - name: Append version to release
        run: |
          mv ./windows/*.exe ./windows/guitar-configurator-win-${GITHUB_REF##*/}.exe
          mv ./linux/*.AppImage ./linux/guitar-configurator-linux-${GITHUB_REF##*/}.AppImage
          mv ./mac/*.dmg ./mac/guitar-configurator-macOS-${GITHUB_REF##*/}.dmg
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ./windows/*.exe
            ./linux/*.AppImage
            ./mac/*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Cleanup windows directory for pages
        run: |
          rm ./windows/guitar-configurator-win-${GITHUB_REF##*/}.exe
      - uses: JamesIves/github-pages-deploy-action@3.7.1
        with:
          SINGLE_COMMIT: true
          CLEAN: true
          CLEAN_EXCLUDE: '["_includes","_layouts","_sass","assets","screenshots",".env",".gitignore","*.html","*.md","Gemfile","Gemfile.lock","_config.yml","adaptor.jpg"]'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: windows 


  pre-release:
    name: Release Preview Build
    runs-on: ubuntu-latest
    needs: [build-linux, build-mac, build-windows]
    # needs: [build-linux, build-windows]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Download Windows Artifacts
        uses: actions/download-artifact@v1
        with:
          name: windows
      - name: Download macOS Artifacts
        uses: actions/download-artifact@v1
        with:
          name: mac  
      - name: Download Linux Artifacts
        uses: actions/download-artifact@v1
        with:
          name: linux
      - uses: dev-drprasad/delete-tag-and-release@v0.2.1
        with:
          delete_release: true
          tag_name: preview
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: preview
          prerelease: true
          name: "Preview Build"
          files: |
            ./windows/*.exe
            ./mac/*.dmg
            ./linux/*.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
