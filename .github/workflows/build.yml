name: Build
on: [push]
jobs:
  build-mac:
    runs-on: macos-latest
    steps:
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with: 
        modules: qtserialport qtquickcontrols2 
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: build and bundle
      run: |
        mkdir build
        cd build
        qmake CONFIG+=release ../
        make -j2
        mkdir -p guitar-configurator.app/Contents/MacOS/binaries
        mkdir -p guitar-configurator.app/Contents/MacOS/Frameworks
        cp -rf ../binaries/mac/* guitar-configurator.app/Contents/MacOS/binaries
        cp -rf ../binaries/mac/* guitar-configurator.app/Contents/MacOS/Frameworks
        cp -rf firmware guitar-configurator.app/Contents/MacOS
        macdeployqt guitar-configurator.app -dmg -qmldir=../
        mkdir artifacts
        cp guitar-configurator*.dmg* artifacts
    - uses: actions/upload-artifact@v1
      with:
        name: mac
        path: build/artifacts
  build-linux:
    runs-on: ubuntu-16.04
    steps:
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with: 
        modules: qtserialport qtquickcontrols2 
    - name: Install libraries
      run: sudo apt-get install libxkbcommon-x11-0
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: build and bundle
      run: |
        mkdir build
        cd build
        qmake CONFIG+=release PREFIX=/usr ../
        make -j$(nproc)
        make INSTALL_ROOT=../appdir -j$(nproc) install ; find ../appdir/
        cp -rf firmware ../appdir/bin
        wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
        chmod a+x linuxdeployqt-continuous-x86_64.AppImage
        ./linuxdeployqt-continuous-x86_64.AppImage ../appdir/usr/share/applications/*.desktop -appimage -qmldir=../ 
        mkdir artifacts
        cp Guitar_Configurator*.AppImage* artifacts
    - uses: actions/upload-artifact@v1
      with:
        name: linux
        path: build/artifacts
        build-win:
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with: 
        modules: qtserialport qtquickcontrols2 
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: build and bundle
      run: |
        call "%programfiles(x86)%\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        qmake -config release -tp vc -spec win32-msvc guitar-configurator.pro
        msbuild guitar-configurator.vcxproj /t:Build /p:Configuration=Release
        mkdir deploy
        xcopy firmware /O/X/E/H/K/I deploy\firmware
        xcopy binaries\win /O/X/E/H/K/I deploy\binaries
        cp release\guitar-configurator.exe deploy
        windeployqt deploy\guitar-configurator.exe -qmldir=.
        xcopy /O/X/E/H/K/I deploy installer\packages\net.tangentmc.guitar_configurator\data
        python -m aqt tool windows tools_ifw 3.1.1 qt.tools.ifw.31
        mkdir artifacts
        .\Tools\QtInstallerFramework\3.1\bin\binarycreator -c installer\config\config.xml -p installer\packages artifacts\win_installer.exe
      shell: cmd
    - uses: actions/upload-artifact@v1
      with:
        name: windows
        path: artifacts
  release:
    if: contains(github.ref, 'tags/v')
    name: Upload Release Asset
    runs-on: ubuntu-latest
    needs: [build-linux, build-mac, build-windows]
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: mac    
      - uses: actions/download-artifact@v1
        with:
          name: windows    
      - uses: actions/download-artifact@v1
        with:
          name: linux  
      - name: build and bundle
        run: |
          ls -R  
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./windows/*.exe
          asset_name: win_installer.exe
          asset_content_type: application/octet-stream
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./mac/*.dmg
          asset_name: guitar-configurator.dmg
          asset_content_type: application/octet-stream
      
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./linux/*.AppImage
          asset_name: Guitar_Configurator.AppImage
          asset_content_type: application/octet-stream